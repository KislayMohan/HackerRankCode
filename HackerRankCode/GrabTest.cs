using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Timers;

namespace HackerRankCode
{
    public static class GrabTest
    {
        public static void GrabTestSol()
        {
            int[] A = new int[5] { 1, 3, 4, 2, 5 };
            ISet<int> missing = new HashSet<int>();
            ISet<int> store = new HashSet<int>();
            int count = 0;
            for (int i = 0; i < A.Length; i++)
            {
                if (!store.Contains(i + 1) && i + 1 != A[i])
                    missing.Add(i + 1);
                if (i + 1 < A[i])
                    store.Add(A[i]);
                else
                    missing.Remove(A[i]);
                if (missing.Count() == 0)
                    count++;
            }
            Console.WriteLine(count);
            //return count;
        }

        public static void GrabTestSol1()
        {
            var value
            BigInteger bigNum = 0;
            foreach (char c in value)
            {
                bigNum <<= 1;
                bigNum += c == '1' ? 1 : 0;
            }
            var count = 0;
            while (bigNum > 0)
            {
                if (bigNum % 2 == 0)
                {
                    bigNum /= 2;
                }
                else
                {
                    bigNum--;
                }
                count++;
            }
            Console.WriteLine(count);
            //return count
        }

        public static void GrabTestSol2()
        {
            var start = DateTime.Now;
            var
            BigInteger bigNum = 0;
            BigInteger num2 = 2;
            var size = S.Length - 1;
            foreach (var item in S)
            {
                if (item == '1')
                {
                    bigNum += BigInteger.Pow(num2, size);
                }
                size--;
            }
            var count = 0;
            while (bigNum > 0)
            {
                if (bigNum % 2 == 0)
                {
                    bigNum /= 2;
                }
                else
                {
                    bigNum--;
                }
                count++;
            }
            Console.WriteLine(count);
            var end = DateTime.Now;
            var elapsed = end - start;
            Console.WriteLine(elapsed);
            //return count
        }
    }
}
